"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const cheerio = __importStar(require("cheerio"));
const systems = [
    'playstation-4',
    'playstation-5',
    'switch',
    'pc',
    'xbox-one',
    'wii-u',
    '3ds',
    'playstation-vita',
    'ios',
    'xbox-series-x',
];
function metacriticAPI(system) {
    if (!systems.includes(system)) {
        throw new Error('System invalid');
    }
    let response = '';
    let baseUrl = 'http://www.metacritic.com/game/';
    function loadMetacriticPage(game_name) {
        return __awaiter(this, void 0, void 0, function* () {
            const sanitizedGameName = game_name
                .trim()
                .toLowerCase()
                .replace(/\s+/g, '-')
                .replace(/[^a-z\d?!-]+/g, '');
            const url = `${baseUrl}${system}/${sanitizedGameName}`;
            const get = yield axios_1.default.get(url);
            response = get.data;
            return response;
        });
    }
    function getMetacriticScores() {
        if (!response) {
            throw new Error('There is no page loaded. Use loadMetacriticPage first.');
        }
        const $ = cheerio.load(response);
        const jsonOutput = {
            name: $('div.product_title h1').text().trim(),
            metacritic_score: 'TBD',
            user_score: 'TBD',
            rating: $('li.summary_detail.product_rating span.data').text().trim(),
            genres: [],
            developers: $('li.summary_detail.developer span.data')
                .text()
                .trim()
                .split(', '),
            publisher: $('li.summary_detail.publisher span.data a')
                .text()
                .split(/\n/g)
                .map((publisher) => publisher.trim())
                .filter((publisher) => !!publisher),
            release_date: $('li.summary_detail.release_data span.data').text().trim(),
            also_on: [],
            also_on_url: [],
            image_url: $('img.product_image.large_image').attr('src'),
            cheat_url: $('li.summary_detail.product_cheats span.data a').attr('href'),
        };
        $('li.summary_detail.product_genre span.data').each(function () {
            jsonOutput.genres.push($(this).text().trim());
        });
        $('li.summary_detail.product_platforms span.data a').each(function () {
            jsonOutput.also_on.push($(this).text().trim());
            jsonOutput.also_on_url.push('http://www.metacritic.com' + $(this).attr('href'));
        });
        const releaseDate = Date.parse(jsonOutput.release_date);
        if (!(releaseDate > Date.now())) {
            jsonOutput.metacritic_score = parseInt($('div.metascore_w.game span').text());
            jsonOutput.user_score = parseFloat($('div.metascore_w.user.game').text().trim());
        }
        return jsonOutput;
    }
    function setSystem(new_system) {
        if (systems.includes(new_system)) {
            system = new_system;
            return system;
        }
        else {
            throw new Error('System invalid');
        }
    }
    function getSystem() {
        return system;
    }
    function searchMetacritic(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchUrl = 'https://www.metacritic.com/autosearch';
            const response = yield axios_1.default.post(searchUrl, `search_term=${query}&image_size=98&search_each=true`, {
                headers: {
                    'x-requested-with': 'XMLHttpRequest',
                },
            });
            const games = response.data.autoComplete.results.filter((result) => result.refType.includes('Game'));
            return games;
        });
    }
    return {
        loadMetacriticPage,
        getMetacriticScores,
        searchMetacritic,
        getSystem,
        setSystem,
    };
}
exports.default = metacriticAPI;
